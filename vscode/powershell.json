{
    "Example-CmdletFull": {
        "prefix": "Phil-CmdletFull",
        "body": [
            "function ${name:Verb-Noun}",
            "{",
            "\t<#",
            "\t.SYNOPSIS",
            "\t\tTBC - Short description",
            "\t.DESCRIPTION",
            "\t\tTBC - Long description",
            "\t.EXAMPLE",
            "\t\tTBC - Example of how to use this cmdlet",
            "\t.INPUTS",
            "\t\tTBC - Inputs to this cmdlet (if any)",
            "\t.OUTPUTS",
            "\t\tTBC - Output from this cmdlet (if any)",
            "\t.LINK",
            "\t\tTBC - Link(s) relevant to this cmdlet",
            "\t",
            "\t\t<#PSScriptInfo>",
            "\t\t.VERSION",
            "\t\t\t0.1.0.0",
            "\t\t.GUID",
            "\t\t\tTBC",
            "\t\t.AUTHOR",
            "\t\t\tTBC",
            "\t\t.COMPANYNAME",
            "\t\t\tTBC",
            "\t\t.COPYRIGHT",
            "\t\t\tTBC",
            "\t\t.TAGS",
            "\t\t\tTBC",
            "\t\t.LICENSEURI",
            "\t\t\tTBC",
            "\t\t.PROJECTURI",
            "\t\t\tTBC",
            "\t\t.ICONURI",
            "\t\t\tTBC",
            "\t\t.EXTERNALMODULEDEPENDENCIES",
            "\t\t\tTBC",
            "\t\t.REQUIREDSCRIPTS",
            "\t\t\tTBC",
            "\t\t.EXTERNALSCRIPTDEPENDENCIES",
            "\t\t\tTBC",
            "\t\t.RELEASENOTES",
            "\t\t\tTBC",
            "\t#>",
            "\t[CmdletBinding(DefaultParameterSetName = \"DefaultParameters\", ConfirmImpact = \"Medium\",  SupportsShouldProcess = \\$True, PositionalBinding = \\$False, HelpUri = \"http://www.microsoft.com/\")]",
            "\t[Alias()]",
            "\t[OutputType([String])]",
            "\tparam",
            "\t(",
            "\t\t[Parameter(Mandatory = \\$True, Position = 0, ValueFromPipeline = \\$True, ValueFromPipelineByPropertyName = \\$True, ParameterSetName = \"DefaultParameters\", HelpMessage = \"What to enter for this parameter\")]",
            "\t\t[String[]] \\$List",
            "\t)",
            "",
            "\tBEGIN",
            "\t{",
            "\t\tif (\\$PSBoundParameters.ContainsKey(\"Debug\"))",
            "\t\t{",
            "\t\t\t\\$DebugPreference = \"Continue\"",
            "\t\t}",
            "\t\tWrite-Debug -Message \"BEGIN Block\"",
            "\t}",
            "",
            "\tPROCESS",
            "\t{",
            "\t\tWrite-Debug -Message \"PROCESS Block\"",
            "\t\tforEach (\\$Thing in \\$List)",
            "\t\t{",
            "\t\t\tif (\\$PSCmdlet.ShouldProcess(\"Target\", \"Operation\"))",
            "\t\t\t{",
            "\t\t\t\ttry",
            "\t\t\t\t{",
            "\t\t\t\t\t# Do things.",
            "\t\t\t\t}",
            "\t\t\t\tcatch",
            "\t\t\t\t{",
            "\t\t\t\t\t\\$PSCmdlet.ThrowTerminatingError(\\$_)",
            "\t\t\t\t}",
            "\t\t\t}",
            "\t\t}",
            "\t}",
            "",
            "\tEND",
            "\t{",
            "\t\tWrite-Debug -Message \"END Block\"",
            "\t}",
            "}"
        ],
        "description": "Example: script cmdlet snippet formatted for my preferences/habits but with all the trimmings."
    },
    "Example-CmdletShort": {
        "prefix": "Phil-CmdletShort",
        "body": [
            "function ${name:Verb-Noun}",
            "{",
            "\t[CmdletBinding(ConfirmImpact = \"Medium\",  SupportsShouldProcess = \\$True)]",
            "\tparam",
            "\t(",
            "\t\t[Parameter(Mandatory = \\$True, Position = 0, ValueFromPipeline = \\$True, ValueFromPipelineByPropertyName = \\$True, HelpMessage = \"What to enter for this parameter\")]",
            "\t\t[String[]] \\$List",
            "\t)",
            "",
            "\tBEGIN",
            "\t{",
            "\t\tif (\\$PSBoundParameters.ContainsKey(\"Debug\"))",
            "\t\t{",
            "\t\t\t\\$DebugPreference = \"Continue\"",
            "\t\t}",
            "\t\tWrite-Debug -Message \"BEGIN Block\"",
            "\t}",
            "",
            "\tPROCESS",
            "\t{",
            "\t\tWrite-Debug -Message \"PROCESS Block\"",
            "\t\tforEach (\\$Thing in \\$List)",
            "\t\t{",
            "\t\t\tif (\\$PSCmdlet.ShouldProcess(\"Target\", \"Operation\"))",
            "\t\t\t{",
            "\t\t\t\ttry",
            "\t\t\t\t{",
            "\t\t\t\t\t# Do things.",
            "\t\t\t\t}",
            "\t\t\t\tcatch",
            "\t\t\t\t{",
            "\t\t\t\t\t\\$PSCmdlet.ThrowTerminatingError(\\$_)",
            "\t\t\t\t}",
            "\t\t\t}",
            "\t\t}",
            "\t}",
            "",
            "\tEND",
            "\t{",
            "\t\tWrite-Debug -Message \"END Block\"",
            "\t}",
            "}"
        ],
        "description": "Example: script cmdlet snippet formatted for my preferences/habits but with all the trimmings."
    },
    "Example-TryCatch": {
        "prefix": "Phil-TryCatch",
        "body": [
            "try",
            "{",
            "\t# Do things.",
            "}",
            "catch",
            "{",
            "\t\\$PSCmdlet.ThrowTerminatingError(\\$_)",
            "}"
        ],
        "description": "Example: Try-catch snippet formatted for my preferences/habits."
    },
    "Example-SMAWorkflow": {
        "prefix": "Phil-SmaWorkflow",
        "body": [
            "workflow ${name:Verb-Noun}",
            "{",
            "<#",
            "\tAuthor:       TBC",
            "\tCreated:      TBC",
            "\tModified:     TBC",
            "\tModified By:  TBC",
            "\tRunbook type: TBC",
            "\tLink:         TBC",
            "",
            "  Function TBC",
            "#>",
            "",
            "\tparam",
            "\t(",
            "\t)",
            "",
            "\t\\$ErrorActionPreference = \"Stop\"",
            "\t\\$VerbosePreference = \"Continue\"",
            "",
            "\t\\$InlineOutput = InlineScript",
            "\t{",
            "\t\t\\$Issues = @()",
            "\t\t\\$ErrorActionPreference = [System.Management.Automation.ActionPreference] \\$Using:ErrorActionPreference",
            "\t\t\\$VerbosePreference = [System.Management.Automation.ActionPreference] \\$Using:VerbosePreference",
            "",
            "\t\ttry",
            "\t\t{",
            "\t\t\t# Do things.",
            "\t\t}",
            "\t\tcatch",
            "\t\t{",
            "\t\t\t\\$LatestDisgrace = \\$_",
            "\t\t\tWrite-Error -Message \\$LatestDisgrace -ErrorAction \"Continue\"",
            "\t\t\t\\$Issues =+ \\$LatestDisgrace",
            "\t\t\t# Basic but functional error-handling",
            "\t\t}",
            "",
            "\t\t[PSCustomObject]@{",
            "\t\t\tStdOut = \\$Null",
            "\t\t\tStdErr = \\$Issues",
            "\t\t}",
            "",
            "\t}",
            "",
            "\tif (\\$Null -ne \\$InlineOutput.StdErr)",
            "\t{",
            "\t\t # Do some error reporting",
            "\t}",
            "\telse",
            "\t{",
            "\t\t# Do something else",
            "\t}",
            "}"
        ],
        "description": "Example: SMA workflow snippet."
    },
    "Example-ShouldProcessShort": {
        "prefix": "Phil-ShouldProcessShort",
        "body": [
            "if (\\$PSCmdlet.ShouldProcess(\"Target\", \"Operation\"))",
            "{",
            "\ttry",
            "\t{",
            "\t\t# Do things.",
            "\t}",
            "\tcatch",
            "\t{",
            "\t\t\\$PSCmdlet.ThrowTerminatingError(\\$_)",
            "\t}",
            "}"
        ],
        "description": "Example: a two-variable Should Process segment."
    },
    "Example-ShouldProcessFull": {
        "prefix": "Phil-ShouldProcessFull",
        "body": [
            "if (\\$PSCmdlet.ShouldProcess(\"Performing the operation '$(\\$MyInvocation.MyCommand.Name)' on target '\\$Target' for '\\$Source'\",",
            "\t\t\t\t\t\t\t\"Perform the operation '$(\\$MyInvocation.MyCommand.Name)' on target '\\$Target' for '\\$Source'?\",",
            "\t\t\t\t\t\t\t\"Are you sure you want to perform this action?\"))",
            "{",
            "\ttry",
            "\t{",
            "\t\t# Do things.",
            "\t}",
            "\tcatch",
            "\t{",
            "\t\t\\$PSCmdlet.ThrowTerminatingError(\\$_)",
            "\t}",
            "}"
        ],
        "description": "Example: a longer three-variable Should Process segment."
    }
}