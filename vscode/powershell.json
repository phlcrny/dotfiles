{
    "Phil-CmdletFull": {
        "prefix": "Phil-CmdletFull",
        "body": [
            "function ${1:Test-Cmdlet}",
            "{",
            "\t<#",
            "\t.SYNOPSIS",
            "\t\tTBC - Short description",
            "\t.DESCRIPTION",
            "\t\tTBC - Long description",
            "\t.EXAMPLE",
            "\t\tTBC - Example of how to use this cmdlet",
            "\t.PARAMETER List",
            "\t\tTBC - Parameter explanation",
            "\t.INPUTS",
            "\t\tTBC - Inputs to this cmdlet (if any)",
            "\t.OUTPUTS",
            "\t\tTBC - Output from this cmdlet (if any)",
            "\t.LINK",
            "\t\tTBC - Link(s) relevant to this cmdlet",
            "\t#>",
            "",
            "\t[CmdletBinding(DefaultParameterSetName = \"DefaultParameters\", ConfirmImpact = \"Medium\",  SupportsShouldProcess = \\$True, PositionalBinding = \\$False, HelpUri = \"http://www.microsoft.com/\")]",
            "\t[Alias()]",
            "\t[OutputType([String])]",
            "\tparam",
            "\t(",
            "\t\t[Parameter(Mandatory = \\$True, Position = 0, ValueFromPipelineByPropertyName = \\$True, ValueFromPipeline = \\$True, ParameterSetName = \"DefaultParameters\", HelpMessage = \"What to enter for this parameter\")]",
            "\t\t[String[]] \\$List",
            "\t)",
            "",
            "\tBEGIN",
            "\t{",
            "\t\tif (\\$PSBoundParameters.ContainsKey(\"Debug\"))",
            "\t\t{",
            "\t\t\t\\$DebugPreference = \"Continue\"",
            "\t\t}",
            "\t\tWrite-Debug -Message \"BEGIN Block\"",
            "\t}",
            "",
            "\tPROCESS",
            "\t{",
            "\t\tWrite-Debug -Message \"PROCESS Block\"",
            "\t\tforEach (\\$Thing in \\$List)",
            "\t\t{",
            "\t\t\tif (\\$PSCmdlet.ShouldProcess(\"Target\", \"Operation\"))",
            "\t\t\t{",
            "\t\t\t\ttry",
            "\t\t\t\t{",
            "\t\t\t\t\t# Do things.",
            "\t\t\t\t}",
            "\t\t\t\tcatch",
            "\t\t\t\t{",
            "\t\t\t\t\t\\$PSCmdlet.ThrowTerminatingError(\\$_)",
            "\t\t\t\t}",
            "\t\t\t}",
            "\t\t}",
            "\t}",
            "",
            "\tEND",
            "\t{",
            "\t\tWrite-Debug -Message \"END Block\"",
            "\t}",
            "}"
        ],
        "description": "Cmdlet snippet with all the trimmings."
    },
    "Phil-CmdletShort": {
        "prefix": "Phil-CmdletShort",
        "body": [
            "function ${1:Test-Cmdlet}",
            "{",
            "\t[CmdletBinding(ConfirmImpact = \"Medium\",  SupportsShouldProcess = \\$True)]",
            "\tparam",
            "\t(",
            "\t\t[Parameter(Mandatory = \\$True, Position = 0, ValueFromPipelineByPropertyName = \\$True, ValueFromPipeline = \\$True, HelpMessage = \"What to enter for this parameter\")]",
            "\t\t[String[]] \\$List",
            "\t)",
            "",
            "\tBEGIN",
            "\t{",
            "\t\tif (\\$PSBoundParameters.ContainsKey(\"Debug\"))",
            "\t\t{",
            "\t\t\t\\$DebugPreference = \"Continue\"",
            "\t\t}",
            "\t\tWrite-Debug -Message \"BEGIN Block\"",
            "\t}",
            "",
            "\tPROCESS",
            "\t{",
            "\t\tWrite-Debug -Message \"PROCESS Block\"",
            "\t\tforEach (\\$Thing in \\$List)",
            "\t\t{",
            "\t\t\tif (\\$PSCmdlet.ShouldProcess(\"Target\", \"Operation\"))",
            "\t\t\t{",
            "\t\t\t\ttry",
            "\t\t\t\t{",
            "\t\t\t\t\t# Do things.",
            "\t\t\t\t}",
            "\t\t\t\tcatch",
            "\t\t\t\t{",
            "\t\t\t\t\t\\$PSCmdlet.ThrowTerminatingError(\\$_)",
            "\t\t\t\t}",
            "\t\t\t}",
            "\t\t}",
            "\t}",
            "",
            "\tEND",
            "\t{",
            "\t\tWrite-Debug -Message \"END Block\"",
            "\t}",
            "}"
        ],
        "description": "Abbreviated but still opinionated cmdlet snippet."
    },
    "Phil-MessagingBlock": {
        "prefix": "Phil-MessagingBlock",
        "body": [
            "-Message \"[$($MyInvocation.MyCommand.Name)] 'A message goes here.\""
        ],
        "description": "A more informative default messaging block"
    },
    "Phil-ShouldProcessShort": {
        "prefix": "Phil-ShouldProcessShort",
        "body": [
            "if (\\$PSCmdlet.ShouldProcess(\"Target\", \"Operation\"))",
            "{",
            "\ttry",
            "\t{",
            "\t\t$TM_SELECTED_TEXT",
            "\t}",
            "\tcatch",
            "\t{",
            "\t\t\\$PSCmdlet.ThrowTerminatingError(\\$_)",
            "\t}",
            "}"
        ],
        "description": "A two-variable ShouldProcess segment."
    },
    "Phil-ShouldProcessFull": {
        "prefix": "Phil-ShouldProcessFull",
        "body": [
            "if (\\$PSCmdlet.ShouldProcess(\"Performing the operation '$(\\$MyInvocation.MyCommand.Name)' on target '\\$Target' for '\\$Source'\",",
            "\t\t\t\t\t\t\t\"Perform the operation '$(\\$MyInvocation.MyCommand.Name)' on target '\\$Target' for '\\$Source'?\",",
            "\t\t\t\t\t\t\t\"Are you sure you want to perform this action?\"))",
            "{",
            "\ttry",
            "\t{",
            "\t\t$TM_SELECTED_TEXT",
            "\t}",
            "\tcatch",
            "\t{",
            "\t\t\\$PSCmdlet.ThrowTerminatingError(\\$_)",
            "\t}",
            "}"
        ],
        "description": "A longer three-variable ShouldProcess segment."
    },
    "Phil-TryCatchCmdlet": {
        "prefix": "Phil-TryCatchCmdlet",
        "body": [
            "try",
            "{",
            "\t$TM_SELECTED_TEXT",
            "}",
            "catch",
            "{",
            "\t\\$PSCmdlet.ThrowTerminatingError(\\$_)",
            "}"
        ],
        "description": "A try-catch snippet for Cmdlets."
    },
    "Phil-TryCatchSimple": {
        "prefix": "Phil-TryCatchSimple",
        "body": [
            "try",
            "{",
            "\t$TM_SELECTED_TEXT",
            "}",
            "catch",
            "{",
            "\t\\$DetailedError = \"\\$(\\$_.Exception)`n\\$(\\$_.FullyQualifiedErrorId)`n\\$(\\$_.ScriptStackTrace)\"",
            "\t\\$Issues += \"  An error occurred:`n`n\\$DetailedError`n\"",
            "\tWrite-Error -Message \\$DetailedError",
            "}"
        ],
        "description": "A try-catch snippet for when $PSCmdlet isn't available."
    },
    "Phil-SMAWorkflow": {
        "prefix": "Phil-SmaWorkflow",
        "body": [
            "workflow ${1:Test-Workflow}",
            "{",
            "\t<#",
            "\t\tAuthor:       TBC",
            "\t\tCreated:      TBC",
            "\t\tModified By:  N/A",
            "\t\tModified:     N/A",
            "\t\tRunbook type: Process/Component",
            "\t\tLink:         TBC",
            "",
            "\t\tFunction Summary - TBC",
            "\t#>",
            "",
            "\tparam()",
            "",
            "\t\\$ErrorActionPreference = \"Stop\"",
            "\t\\$VerbosePreference = \"Continue\"",
            "",
            "\t\\$InlineOutput = InlineScript",
            "\t{",
            "\t\t\\$ErrorActionPreference = [System.Management.Automation.ActionPreference] \\$Using:ErrorActionPreference",
            "\t\t\\$VerbosePreference = [System.Management.Automation.ActionPreference] \\$Using:VerbosePreference",
            "\t\t\\$Issues = \\$Null",
            "",
            "\t\ttry",
            "\t\t{",
            "\t\t\t# Do things.",
            "\t\t}",
            "\t\tcatch",
            "\t\t{",
            "\t\t\t\\$DetailedError = \"\\$(\\$_.Exception)`n\\$(\\$_.FullyQualifiedErrorId)`n\\$(\\$_.ScriptStackTrace)\"",
            "\t\t\t\\$Issues += \"  An error occurred:`n`n\\$DetailedError`n\"",
            "\t\t\tWrite-Error -Message \\$DetailedError",
            "\t\t}",
            "",
            "\t\ttry",
            "\t\t{",
            "\t\t\t# Do things.",
            "\t\t}",
            "\t\tcatch",
            "\t\t{",
            "\t\t\t\\$DetailedError = \"\\$(\\$_.Exception)`n\\$(\\$_.FullyQualifiedErrorId)`n\\$(\\$_.ScriptStackTrace)\"",
            "\t\t\t\\$Issues += \"  An error occurred:`n`n\\$DetailedError`n\"",
            "\t\t\tWrite-Error -Message \\$DetailedError",
            "\t\t}",
            "",
            "\t\t[PSCustomObject]@{",
            "\t\t\tOutput = \\$Null",
            "\t\t\tErrors = \\$Issues",
            "\t\t}",
            "\t}",
            "",
            "\tif (\\$Null -ne \\$InlineOutput.Errors)",
            "\t{",
            "\t\tWrite-Verbose -Message \"Errors reported in InlineScript\"",
            "\t}",
            "\tif (\\$Null -eq \\$InlineOutput.Errors)",
            "\t{",
            "\t\tWrite-Verbose -Message \"No errors reported in InlineScript\"",
            "\t}",
            "\telse",
            "\t{",
            "\t\t# Do something else",
            "\t}",
            "}"
        ],
        "description": "An SMA workflow snippet."
    }
}