{
    "Example-CmdletFull": {
        "prefix": "Phil-CmdletFull",
        "body": [
            "function ${name:Verb-Noun}",
            "{",
            "<#",
            ".SYNOPSIS",
            "\tTBC - Short description",
            ".DESCRIPTION",
            "\tTBC - Long description",
            ".EXAMPLE",
            "\tTBC - Example of how to use this cmdlet",
            ".INPUTS",
            "\tTBC - Inputs to this cmdlet (if any)",
            ".OUTPUTS",
            "\tTBC - Output from this cmdlet (if any)",
            ".NOTES",
            "\tVersion 0.1.0",
            ".LINK",
            "\tTBC - Link(s) relevant to this cmdlet",
            "#>",
            "\t[CmdletBinding(DefaultParameterSetName = 'DefaultParameters', ConfirmImpact = 'Medium',  SupportsShouldProcess = \\$True, PositionalBinding = \\$False, HelpUri = 'http://www.microsoft.com/')]",
            "\t[Alias()]",
            "\t[OutputType([String])]",
            "\tparam",
            "\t(",
            "\t\t[Parameter(Mandatory = \\$True, Position = 0, ValueFromPipeline = \\$True, ValueFromPipelineByPropertyName = \\$True, ParameterSetName = 'DefaultParameters', HelpMessage = \"What to enter for this parameter\")]",
            "\t\t[ValidateNotNull()]",
            "\t\t[ValidateNotNullOrEmpty()]",
            "\t\t[ValidateCount(0,5)]",
            "\t\t[ValidateSet(\"sun\", \"moon\", \"earth\")]",
            "\t\t[Alias(\"p1\")]",
            "\t\t\\$Param1,",
            "",
            "\t\t[Parameter(ParameterSetName = 'DefaultParameters')]",
            "\t\t[AllowNull()]",
            "\t\t[AllowEmptyCollection()]",
            "\t\t[AllowEmptyString()]",
            "\t\t[ValidateScript({\\$True})]",
            "\t\t[ValidateRange(0,5)]",
            "\t\t[int] \\$Param2,",
            "",
            "\t\t[Parameter(ParameterSetName = 'AlternateParameters')]",
            "\t\t[ValidatePattern(\"[a-z]*\")]",
            "\t\t[ValidateLength(0,15)]",
            "\t\t[String] \\$Param3,",
            "",
            "\t\t[Parameter(ParameterSetName = 'AlternateParameters')]",
            "\t\t[String[]] \\$List",
            "\t)",
            "",
            "\tBEGIN",
            "\t{",
            "\t\tif (\\$PSBoundParameters.ContainsKey(\"Debug\"))",
            "\t\t{",
            "\t\t\t\\$DebugPreference = \"Continue\"",
            "\t\t}",
            "\t\tWrite-Debug -Message \"BEGIN Block\"",
            "",
            "\t\t#region Parameter-handling and Variables",
            "",
            "\t\t\t# Variables",
            "\t\t\t[string] \\$TestVariable = \"Test\"",
            "",
            "\t\t#endregion Parameter-handling and Variables",
            "\t}",
            "",
            "\tPROCESS",
            "\t{",
            "\t\tWrite-Debug -Message \"PROCESS Block\"",
            "\t\tforEach (\\$Thing in \\$List)",
            "\t\t{",
            "\t\t\tif (\\$PSCmdlet.ShouldProcess(\"Target\", \"Operation\"))",
            "\t\t\t{",
            "\t\t\t\ttry",
            "\t\t\t\t{",
            "\t\t\t\t\t# Do things.",
            "\t\t\t\t}",
            "\t\t\t\tcatch",
            "\t\t\t\t{",
            "\t\t\t\t\t\\$PSCmdlet.ThrowTerminatingError(\\$_)",
            "\t\t\t\t}",
            "\t\t\t}",
            "\t\t}",
            "\t}",
            "",
            "\tEND",
            "\t{",
            "\t\tWrite-Debug -Message \"END Block\"",
            "\t}",
            "}"
        ],
        "description": "Example: script cmdlet snippet formatted for my preferences/habits but with all the trimmings."
    },
    "Example-CmdletShort": {
        "prefix": "Phil-CmdletShort",
        "body": [
            "function ${name:Verb-Noun}",
            "{",
            "<#",
            ".SYNOPSIS",
            "\tTBC - Short description",
            ".DESCRIPTION",
            "\tTBC - Long description",
            ".EXAMPLE",
            "\tTBC - Example of how to use this cmdlet",
            ".INPUTS",
            "\tTBC - Inputs to this cmdlet (if any)",
            ".OUTPUTS",
            "\tTBC - Output from this cmdlet (if any)",
            ".NOTES",
            "\tVersion 0.1.0",
            ".LINK",
            "\tTBC - Link(s) relevant to this cmdlet",
            "#>",
            "\t[CmdletBinding(ConfirmImpact = 'Medium',  SupportsShouldProcess = \\$True)]",
            "\tparam",
            "\t(",
            "\t\t[Parameter(Mandatory = \\$True, Position = 0, ValueFromPipeline = \\$True, ValueFromPipelineByPropertyName = \\$True, HelpMessage = \"What to enter for this parameter\")]",
            "\t\t[string] \\$Param1,",
            "",
            "\t\t[Parameter(ParameterSetName = 'DefaultParameters')]",
            "\t\t[AllowNull()]",
            "\t\t[AllowEmptyCollection()]",
            "\t\t[AllowEmptyString()]",
            "\t\t[ValidateScript({\\$True})]",
            "\t\t[ValidateRange(0,5)]",
            "\t\t[int] \\$Param2,",
            "",
            "\t\t[Parameter(ParameterSetName = 'AlternateParameters')]",
            "\t\t[String[]] \\$List",
            "\t)",
            "",
            "\tBEGIN",
            "\t{",
            "\t\tif (\\$PSBoundParameters.ContainsKey(\"Debug\"))",
            "\t\t{",
            "\t\t\t\\$DebugPreference = \"Continue\"",
            "\t\t}",
            "\t\tWrite-Debug -Message \"BEGIN Block\"",
            "",
            "\t\t#region Parameter-handling and Variables",
            "",
            "\t\t\t# Parameters",
            "\t\t\tif (\\$PSBoundParameters.ContainsKey(\"Param2\"))",
            "\t\t\t{",
            "\t\t\t\t[int] \\$Param2 = \\$PSBoundParameters.Param2",
            "\t\t\t}",
            "\t\t\telse",
            "\t\t\t{",
            "\t\t\t\t[int] \\$Param2 = 0",
            "\t\t\t}",
            "",
            "\t\t\t# Variables",
            "\t\t\t[string] \\$TestVariable = \"Test\"",
            "",
            "\t\t#endregion Parameter-handling and Variables",
            "\t}",
            "",
            "\tPROCESS",
            "\t{",
            "\t\tWrite-Debug -Message \"PROCESS Block\"",
            "\t\tforEach (\\$Thing in \\$List)",
            "\t\t{",
            "\t\t\tif (\\$PSCmdlet.ShouldProcess(\"Target\", \"Operation\"))",
            "\t\t\t{",
            "\t\t\t\ttry",
            "\t\t\t\t{",
            "\t\t\t\t\t# Do things.",
            "\t\t\t\t}",
            "\t\t\t\tcatch",
            "\t\t\t\t{",
            "\t\t\t\t\t\\$PSCmdlet.ThrowTerminatingError(\\$_)",
            "\t\t\t\t}",
            "\t\t\t}",
            "\t\t}",
            "\t}",
            "",
            "\tEND",
            "\t{",
            "\t\tWrite-Debug -Message \"END Block\"",
            "\t}",
            "}"
        ],
        "description": "Example: script cmdlet snippet formatted for my preferences/habits but with all the trimmings."
    },
    "Example-TryCatch": {
        "prefix": "Phil-TryCatch",
        "body": [
            "try",
            "{",
            "\t# Do things.",
            "}",
            "catch",
            "{",
            "\t\\$PSCmdlet.ThrowTerminatingError(\\$_)",
            "\tBreak",
            "}"
        ],
        "description": "Example: Try-catch snippet formatted for my preferences/habits."
    },
    "Example-SMAWorkflow": {
        "prefix": "Phil-SmaWorkflow",
        "body": [
            "<#",
            "  Author:       TBC",
            "  Created:      TBC",
            "  Modified:     TBC",
            "  Runbook type: TBC",
            "  Link:         TBC",
            "",
            "  Function TBC",
            "#>",
            "",
            "workflow ${name:Verb-Noun}",
            "{",
            "\tparam",
            "\t(",
            "\t)",
            "",
            "\t\\$ErrorActionPreference = \"Stop\"",
            "\t\\$VerbosePreference = \"Continue\"",
            "",
            "\t\\$Results = InlineScript",
            "\t{",
            "\t\t\\$ErrorActionPreference = [System.Management.Automation.ActionPreference] \\$Using:ErrorActionPreference",
            "\t\t\\$VerbosePreference = [System.Management.Automation.ActionPreference] \\$Using:VerbosePreference",
            "",
            "\t\ttry",
            "\t\t{",
            "\t\t\t# Do things.",
            "\t\t}",
            "\t\tcatch",
            "\t\t{",
            "\t\t\tWrite-Error -Message \\$_ -ErrorAction \"Continue\"",
            "\t\t\t# Basic but functional error-handling",
            "\t\t}",
            "\t}",
            "",
            "\tif (\\$Results)",
            "\t{",
            "\t\t # Do a thing",
            "\t}",
            "\telse",
            "\t{",
            "\t\t# Do another thing",
            "\t}",
            "}"
        ],
        "description": "Example: SMA workflow snippet."
    },
    "Example-ShouldProcessShort": {
        "prefix": "Phil-ShouldProcessShort",
        "body": [
            "if (\\$PSCmdlet.ShouldProcess(\"Target\", \"Operation\"))",
            "{",
            "\ttry",
            "\t{",
            "\t\t# Do things.",
            "\t}",
            "\tcatch",
            "\t{",
            "\t\t\\$PSCmdlet.ThrowTerminatingError(\\$_)",
            "\t\tBreak",
            "\t}",
            "}"
        ],
        "description": "Example: a two-variable Should Process segment."
    },
    "Example-ShouldProcessFull": {
        "prefix": "Phil-ShouldProcessFull",
        "body": [
            "if (\\$PSCmdlet.ShouldProcess(\"Performing the operation '$(\\$MyInvocation.MyCommand.Name)' on target '\\$Target' for '\\$Source'\",",
            "\t\t\t\t\t\t\t\"Perform the operation '$(\\$MyInvocation.MyCommand.Name)' on target '\\$Target' for '\\$Source'?\",",
            "\t\t\t\t\t\t\t\"Are you sure you want to perform this action?\"))",
            "{",
            "\ttry",
            "\t{",
            "\t\t# Do things.",
            "\t}",
            "\tcatch",
            "\t{",
            "\t\t\\$PSCmdlet.ThrowTerminatingError(\\$_)",
            "\t\tBreak",
            "\t}",
            "}"
        ],
        "description": "Example: a longer three-variable Should Process segment."
    }
}